import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import matplotlib.colors as col

# COLOURS
blue_base = ['#FFFFFF', '#E8EAFE', '#D3D7FE', '#BDC3FF']
red_base = ['#FFFFFF', '#FFE8E8', '#FEC7C7', '#FEA2A2']
orang_base = ['#FFFFFF', '#FEF4DE', '#FEE6B2', '#FFD883']
green_base = ['#FFFFFF', '#DEFFD4', '#BDFEAA', '#9CFF7E']
purpl_base = ['#FFFFFF', '#F3D9FE', '#EABBFF', '#DB8DFE']
grey_base = ['#FFFFFF', '#E3E3E3']


def createColour(base, end, cols, final):
    # Base background colours
    base_cmap = col.LinearSegmentedColormap.from_list('custom', base, N=256)
    base_cols = base_cmap(np.linspace(0, 1, 256-end))

    # Accent colours
    extra_cmap = col.LinearSegmentedColormap.from_list('custom', cols, N=256)
    extra_cols = extra_cmap(np.linspace(0, 1, end-1))

    # Final colour
    final_cmap = col.LinearSegmentedColormap.from_list('custom', [final, final], N = 5)
    final_col = final_cmap(np.linspace(0, 1, 2))

    # Join the colours
    cmap = np.vstack((base_cols, extra_cols, final_col))
    return col.ListedColormap(cmap)


############# JULIA SET #############

def JuliaOutline(xrang, yrang, c, points, point_size, iters=100, col='#070861'):
    # Generate a grid between the specified ranges
    X = np.random.uniform(*xrang, points)
    Y = np.random.uniform(*yrang, points)
    Z = X+1j*Y

    # Iterate, choosing +/- 1 at each point
    for _ in range(iters):
        Z = np.sqrt(Z-c)*np.random.choice([1, -1], size=points)

    # Display the Julia Set
    plt.scatter(np.real(Z), np.imag(Z), s=point_size, c=col)
    plt.axis('off')
    plt.show()

############# FILLED JULIA SET #############

def multiply(Z_r, Z_i, counter, c, maxiters):
    i = 0
    while i < maxiters:
        #Apply the escape time approximation
        if Z_r*Z_r + Z_i*Z_i < (1+np.abs(c))**2:

            # Iterate
            newZ_r = Z_r*Z_r - Z_i*Z_i + np.real(c)
            newZ_i = 2*Z_r*Z_i + np.imag(c)
            counter += 1
            i += 1
            Z_r = newZ_r
            Z_i = newZ_i
        else:
            break

    return counter


def FilledJulia(xrang, yrang, c, points, maxiters, filename):
    # Generate grid of points
    X = np.linspace(*xrang, points)
    Y = np.linspace(*yrang, points)
    Z_r, Z_i = np.meshgrid(X, Y)
    counter = np.zeros((points, points))

    # This substantially speeds up the computation
    vmultiply = np.vectorize(multiply)
    counter = vmultiply(Z_r, Z_i, counter, c, maxiters)

    np.save(filename, counter)

############# MANDELBROT SET #############

def mandMultiply(C_r, C_i, maxiters, counter):
    Z_r = 0
    Z_i = 0
    i = 0
    while i < maxiters:
        # Implement the escape time approximation
        if Z_r**2 + Z_i**2 < 4:
            newZ_r = Z_r**2 - Z_i**2 + C_r
            newZ_i = 2*Z_r*Z_i + C_i
            counter += 1
            i += 1

            Z_r = newZ_r
            Z_i = newZ_i
        else:
            break

    return counter


def Mandelbrot(xrang, yrang, points, maxiters, filename):
    # Generate grid of points
    X = np.linspace(*xrang, points)
    Y = np.linspace(*yrang, points)
    C_r, C_i = np.meshgrid(X, Y)
    counter = np.zeros((points, points))

    # Computation is much faster
    vmult = np.vectorize(mandMultiply)

    counter = vmult(C_r, C_i, maxiters, counter)
    np.save(filename, counter)

############# DISPLAY #############

def display(filename, base, end, cols, final, save):
    counter = np.load(f'{filename}.npy', 'r')
    cmap = createColour(base, end, cols, final)
    plt.imshow(np.flipud(counter), cmap=cmap)
    plt.axis('off')

    if save:
        plt.savefig(f"{filename}.png",bbox_inches='tight')

    plt.show()
